version: "3.8"
services:
  nuxt-service:
    build:
      context: ./micro-frontend/nuxt-app-service
      dockerfile: Dockerfile
    container_name: nuxt-service
    image: nuxt-service:latest
    ports:
      - "3032:3000"
    networks:
      - micro-frontend-network
    volumes:
      - ./micro-frontend/nuxt-app-service:/src/app
      - /src/app/node_modules
    env_file:
      - .env
    environment:
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING}
      - HMR_HOST=${HMR_HOST}
      - NUXT_PUBLIC_BASE_URL=${NUXT_PUBLIC_BASE_URL}
    depends_on:
      - rabbitmq
    restart: no
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 5s
      timeout: 3s
      retries: 5

  next-service:
    build:
      context: ./micro-frontend/next-service
      dockerfile: Dockerfile
    container_name: next-service
    image: next-service:latest
    ports:
      - "3031:3000"
    networks:
      - micro-frontend-network
    volumes:
      - ./micro-frontend/next-service:/src/app
      - /src/app/node_modules
    env_file:
      - .env
    environment:
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING}
      - WATCHPACK_POLLING=${WATCHPACK_POLLING}
      - NODE_ENV=${NODE_ENV}
      - HOST=${HOST}
      - PORT=${NEXT_SERVICE_PORT}
      - NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}
    stdin_open: true
    tty: true
    restart: no
    depends_on:
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 5s
      timeout: 3s
      retries: 5

  auth-service-laravel:
    build:
      context: ./micro-service/laravel-service
      dockerfile: ./docker/workspace/development/Dockerfile
      target: development
    container_name: auth-service-laravel
    image: auth-service-laravel:latest
    env_file:
      - .env
    environment:
      - APP_ENV=${APP_ENV}
      - APP_DEBUG=${APP_DEBUG}
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    depends_on:
      mysql-master:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./micro-service/laravel-service:/var/www
      - ./logs:/var/log/supervisor
    networks:
      - micro-service-network
 

  express-service:
    build:
      context: ./micro-service/express-service
      dockerfile: Dockerfile
    container_name: express-service
    image: express-service:latest
    ports:
      - "3000:3000"
    depends_on:
      - auth-service-laravel
      - rabbitmq
    networks:
      - micro-service-network
    volumes:
      - ./micro-service/express-service:/src/app
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING}
      - CHOKIDAR_INTERVAL=${CHOKIDAR_INTERVAL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    restart: no
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 5s
      timeout: 3s
      retries: 5

  nginx-laravel:
    build: ./micro-service/laravel-service/docker/nginx/development
    container_name: nginx-laravel
    image: nginx-laravel:latest
    ports:
      - "8000:80"
    depends_on:
      - auth-service-laravel
    networks:
      - micro-service-network
    healthcheck:
      test: curl -f http://localhost || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  gateway-nginx-backend:
    build: ./nginx-gateway-backend
    container_name: gateway-nginx-backend
    image: gateway-nginx-backend:latest
    ports:
      - "8080:80"
    depends_on:
      - auth-service-laravel
      - express-service
      - nginx-laravel
    networks:
      - micro-service-network
    restart: no

  gateway-nginx-frontend:
    build: ./nginx-gateway-frontend
    container_name: gateway-nginx-frontend
    image: gateway-nginx-frontend:latest
    ports:
      - "8083:80"
    depends_on:
      - nuxt-service
      - next-service
    networks:
      - micro-frontend-network
    restart: no

  mysql-master:
    build:
      context: ./database/mysql-master
      dockerfile: Dockerfile
    image: micro-service-mysql-master:9.4
    container_name: mysql-master
    restart: no
    env_file:
      - .env
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_ALLOW_EMPTY_PASSWORD=no
      - MYSQL_ROOT_HOST=%
    ports:
      - "3307:3306"
    volumes:
      - mysql-master-data:/var/lib/mysql
    networks:
      - micro-service-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  mysql-replica1:
    build:
      context: ./database/mysql-replica
      dockerfile: Dockerfile
    image: micro-service-mysql-replica1:9.4
    container_name: mysql-replica1
    restart: no
    env_file:
      - .env
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_ALLOW_EMPTY_PASSWORD=no
      - MYSQL_ROOT_HOST=%
    volumes:
      - mysql-replica1-data:/var/lib/mysql
    depends_on:
      - mysql-master
    networks:
      - micro-service-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  mysql-replica2:
    build:
      context: ./database/mysql-replica2
      dockerfile: Dockerfile
    image: micro-service-mysql-replica2:9.4
    container_name: mysql-replica2
    restart: no
    env_file:
      - .env
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_ALLOW_EMPTY_PASSWORD=no
      - MYSQL_ROOT_HOST=%
    volumes:
      - mysql-replica2-data:/var/lib/mysql
    depends_on:
      - mysql-master
    networks:
      - micro-service-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  replication-setup:
    image: mysql:8.0-debian
    container_name: replication-setup
    volumes:
      - ./database/setup-replication-db.sh:/scripts/setup-replication.sh
    networks:
      - micro-service-network
    depends_on:
      mysql-master:
        condition: service_healthy
      mysql-replica1:
        condition: service_healthy
      mysql-replica2:
        condition: service_healthy
    entrypoint: ["/bin/bash", "/scripts/setup-replication.sh"]

  redis-server:
    image: redis:latest
    container_name: redis-server
    restart: unless-stopped
    build:
      context: ./database/redis
      dockerfile: Dockerfile
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "-p", "${REDIS_PORT}", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - micro-service-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - .env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    networks:
      - micro-service-network

networks:
  micro-service-network:
    driver: bridge
  micro-frontend-network:
    driver: bridge

volumes:
  mysql-master-data:
  mysql-replica1-data:
  mysql-replica2-data:
  rabbitmq_data:
    driver: local