version: "3.8"

services:

  nuxt-service:
    build:
      context: ./micro-frontend/nuxt-app-service
      dockerfile: Dockerfile
    container_name: nuxt-service
    image: nuxt-service:latest
    ports:
    - "3032:3000"
    networks:
      - micro-frontend-network
    volumes:
      - ./micro-frontend/nuxt-app-service:/src/app
      - /src/app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - HMR_HOST=host.docker.internal
      - NUXT_PUBLIC_BASE_URL=/dashboard
    restart: no
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 5s
      timeout: 3s
      retries: 5

  next-service:
    build:
      context: ./micro-frontend/next-service
      dockerfile: Dockerfile
    container_name: next-service
    image: next-service:latest
    ports:
    - "3031:3000"
    networks:
      - micro-frontend-network
    volumes:
      - ./micro-frontend/next-service:/src/app
      - /src/app/node_modules
    environment:
        - CHOKIDAR_USEPOLLING=true  # Untuk file watching di Docker
        - WATCHPACK_POLLING=true    # Alternative untuk file watching
        - NODE_ENV=development
        - HOST=0.0.0.0
        - PORT=3000
        - NEXT_PUBLIC_BASE_URL=/
    stdin_open: true
    tty: true
    restart: no
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 5s
      timeout: 3s
      retries: 5
    
  auth-service-laravel:
    build:
      context: ./micro-service/laravel-service
      dockerfile: ./docker/workspace/development/Dockerfile
      target: development
    container_name: auth-service-laravel
    image: auth-service-laravel:latest
    # ports:
    # - "127.0.0.1:8080:3000" 
    environment:
      - APP_ENV=${APP_ENV:-local}
      - APP_DEBUG=${APP_DEBUG:-true}
      - DB_CONNECTION=${DB_CONNECTION:-mysql}
      - DB_HOST=${DB_HOST:-mysql}
      - DB_PORT=${DB_PORT:-3306}
      - DB_DATABASE=${DB_DATABASE:-micro-service}
      - DB_USERNAME=${DB_USERNAME:-root}
      - DB_PASSWORD=${DB_PASSWORD:-1215161}
    depends_on:
      mysql-master:
        condition: service_healthy
    volumes:
      - ./micro-service/laravel-service:/var/www
    networks:
      - micro-service-network

  express-service:
    build:
      context: ./micro-service/express-service
      dockerfile: Dockerfile
    container_name: express-service
    image: express-service:latest
    ports:
    - "3000:3000" 
    depends_on:
      - auth-service-laravel
    networks:
      - micro-service-network
    volumes:
      - ./micro-service/express-service:/src/app
    environment:
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=1000
    restart: no
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 5s
      timeout: 3s
      retries: 5

  nginx-laravel:
    build: ./micro-service/laravel-service/docker/nginx/development
    container_name: nginx-laravel
    image: nginx-laravel:latest
    ports:
    - "8000:80" 
    depends_on:
      - auth-service-laravel
    networks:
      - micro-service-network
    healthcheck:
      test: curl -f http://localhost || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      
  gateway-nginx-backend:
    build: ./nginx-gateway-backend
    container_name: gateway-nginx-backend
    image: gateway-nginx-backend:latest
    ports:
      - "8080:80"
    depends_on:
      - auth-service-laravel
      - express-service
      - nginx-laravel
    networks:
      - micro-service-network
    restart: no

  gateway-nginx-frontend:
    build: ./nginx-gateway-frontend
    container_name: gateway-nginx-frontend
    image: gateway-nginx-frontend:latest
    ports:
      - "8083:80"
    depends_on:
      - nuxt-service
      - next-service
    networks:
      - micro-frontend-network
    restart: no

  mysql-master:
    build:
      context: ./database/mysql-master
      dockerfile: Dockerfile
    image: micro-service-mysql-master:9.4
    container_name: mysql-master
    restart: no
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-1215161}
      MYSQL_DATABASE: ${DB_DATABASE:-micro-service}
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"
      MYSQL_ROOT_HOST: "%"
    ports:
      - "3307:3306"
    volumes:
      - mysql-master-data:/var/lib/mysql
    networks:
      - micro-service-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD:-1215161}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  mysql-replica1:
    build:
      context: ./database/mysql-replica
      dockerfile: Dockerfile
    image: micro-service-mysql-replica1:9.4
    container_name: mysql-replica1
    restart: no
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-1215161}
      MYSQL_DATABASE: ${DB_DATABASE:-micro-service}
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"
      MYSQL_ROOT_HOST: "%"
    volumes:
      - mysql-replica1-data:/var/lib/mysql
    depends_on:
      - mysql-master
    networks:
      - micro-service-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD:-1215161}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
      
  mysql-replica2:
    build:
      context: ./database/mysql-replica2
      dockerfile: Dockerfile
    image: micro-service-mysql-replica2:9.4
    container_name: mysql-replica2
    restart: no
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-1215161}
      MYSQL_DATABASE: ${DB_DATABASE:-micro-service}
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"
      MYSQL_ROOT_HOST: "%"
    volumes:
      - mysql-replica2-data:/var/lib/mysql
    depends_on:
      - mysql-master
    networks:
      - micro-service-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD:-1215161}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  
  replication-setup:
    image: mysql:8.0-debian
    container_name: replication-setup
    volumes:
      - ./database/setup-replication-db.sh:/scripts/setup-replication.sh
    networks:
      - micro-service-network
    depends_on:
      mysql-master:
        condition: service_healthy
      mysql-replica1:
        condition: service_healthy
      mysql-replica2:
        condition: service_healthy
    entrypoint: ["/bin/bash", "/scripts/setup-replication.sh"]

  redis-server:
    image: redis:latest
    container_name: redis-server
    build:
      context: ./database/redis
      dockerfile: Dockerfile
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "-p", "6379", "-a", "yourpassword", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - micro-service-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # port AMQP untuk komunikasi service
      - "15672:15672" # port UI management
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password

networks:
  micro-service-network:
    driver: bridge
  micro-frontend-network:
    driver: bridge

volumes:
  mysql-master-data:
  mysql-replica1-data:
  mysql-replica2-data: